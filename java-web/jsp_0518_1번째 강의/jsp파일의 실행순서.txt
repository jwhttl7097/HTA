jsp파일의 실행순서
1. 브라우저가 서버에 요청URL을 보낸다.
	http://localhost/sample/hello.jsp
2. 서버는 요청URL을 분석해서 hello.jsp를 찾는다.
	* Tomcat 10.0\wtpwebapps\sample\hello.jsp를 발견
	* hello.jsp를 발견하지 못하면 "HTTP 상태 404 - 찾을 수 없음 " 에러가 표시된다.(경로를 잘못적음)
3. 서버는 hello.jsp에 대한 자바 실행파일을 찾는다.
	Tomcat 10.0\work\Catalina\localhost\sample\org\apache\jsp\hello_jsp.class를 찾는다.
	1. hello_jsp.class가 없으면
		hello.jsp를 자바코드로 변환해서 hello_jsp.java 파일을 생성한다.
		hello_jsp.java를 컴파일해서 실행파일 hello_jsp.class 파일을 생성한다.
		hello_jsp.class(설계도)를 메모리에 로딩한다.
	2. hello_jsp.class가 있으면
		hello_jsp.class(설계도)를 메모리에 로딩한다.
4. hello_jsp.class로 객체를 생성하고, 생성된 객체의 기본 생성자 메소드를 실행한다.
	* 기본 생성자 메소드는 객체의 초기화 작업을 수행하지 않음
5. 생성된 객체의 _jspInit() 메소드를 실행해서 객체의 초기화 작업을 수행한다.
6. 생성된 객체의 _jspService(HttpServletRequest request, HttpServletResponse response) 메소드를 실행한다.
	* _jspService(req, res) 메소드는 클라이언트의 요청을 처리하고, 동적 HTML컨텐츠를 응답으로 제공한다.
	* hello.jsp파일의 내용이 변경되지 않으면 생성된 객체는 웹서버에서 계속 유지된다.
	* 클라이언트로 부터 hello.jsp에 대한 요청을 받을 때 마다 6번 작업을 계속 반복한다.
	* _jspService(req, res) 메소드 실행 중 예외가 발생하면 "HTTP 상태 500 - 내부 서버 오류" 에러가 표시된다.(자바코드를 잘못 적음)
7. hello.jsp의 내용이 변경되면 생성된 객체의 _jspDestroy() 메소드를 실행한 후 객체를 제거한다.
	* 변경된 hello.jsp를 새로 요청하면 3~5번 작업을 다시 실행한다.
	* 5번까지의 작업이 완료되면 다시 6번작업을 실행해서 클라이언트의 요청을 처리한다.